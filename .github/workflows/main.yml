name: Merge to integration
on:
  issue_comment:
    types: [created]

jobs:
  merge-branch:
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - name: "get target"
        id: triggered
        uses: actions/github-script@v6
        with:
          script: |
            const pattern = /deploy to integration\/(.*)/
            const match = context.payload.comment.body.match(pattern)
            console.log(match, (match && match[1]))
            return match && match[1]

      - name: "We're starting, leave üëÄ reaction on the comment"
        if: steps.triggered.outputs.result
        uses: actions/github-script@v6
        with:
          script: |
            try {
              return await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: "eyes"
              })
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: "get the base_ref of the branch in the pr" # this is part of the pull_request event but is not in the issue_comment :(
        if: steps.triggered.outputs.result
        uses: actions/github-script@v6
        id: pr-ref
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.rest.pulls.get(request)
              return result.data.head.ref
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: "Merge branch into staging"
        if: steps.triggered.outputs.result
        uses: actions/github-script@v6
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: "staging",
              head: ${{ steps.pr-ref.outputs.result }},
            }
            core.info(`Merging branch ${{ steps.pr-ref.outputs.result }} into "staging"`)
            try {
              const result = await github.rest.repos.merge(request);
              return result.data
            } catch (err) {
              console.log({err})
              console.log("TODO: leave a comment on the PR that we failed")
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: "All done, leave üëç reaction on the comment"
        if: steps.triggered.outputs.result
        uses: actions/github-script@v6
        with:
          script: |
            try {
              return await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: "+1"
              })
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      # - uses: actions/checkout@master
      #   if: steps.check.outputs.triggered == 'true'
      #   with:
      #     ref: ${{ steps.get-pr.outputs.result }}

      # - name: Merge to integration
      #   if: steps.check.outputs.triggered == 'true'
      #   uses: devmasx/merge-branch@master
      #   with:
      #     type: now
      #     source_ref: ${{ steps.get-pr.outputs.result }}
      #     target_branch: staging
      #     github_token: ${{ github.token }}

      # - uses: khan/pull-request-comment-trigger@v1.1.0
      #   with:
      #     trigger: 'deploy to integration/'
      #     reaction: '+1'
      #   env:
      #     GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

